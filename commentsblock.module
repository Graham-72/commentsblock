<?php
/**
 * @file
 * Puts the commentform  and list into a block and provides a default view for
 * the comments.
 *
 */

/**
 * Implements hook_menu().
 */
function commentsblock_menu() {
  $items['admin/config/user-interface/commentsblock'] = array(
    'title' => 'Comments Block',
    'description' => 'How to display the comments block',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('commentsblock_settings_form'),
    'access arguments' => array('administer comment blocks'),
    'file' => 'commentsblock.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commentsblock_permission() {
  return array(
    'administer comment blocks' => array(
      'title' => t('administer comment blocks'),
      'description' => t('Administer comment blocks'),
    ),
  );
}

/**
 * Implements hook_comment_view_alter().
 */
function commentsblock_node_view_alter(&$build) {
  $config = config('commentsblock.settings');

  // Save the comment list and form in static storage.
  commentsblock_static_comments($build['#node']->nid, $build['#node']);

  // Hide the node comments and form if needed.
  $commentsblock_hide_node_comments = $config->get('commentsblock_hide_node_comments');
  if ($commentsblock_hide_node_comments) {
    $build['#node']->comment = COMMENT_NODE_HIDDEN;
  }

  // Normally shows "Add comment" on the bottom of the node.
  // Hide this if not required.
  $hidelink = $config->get('commentsblock_hide_link');
  if($hidelink) {
   unset($build['links']['comment']);
  }
}

/**
 * Implements hook_block_info().
 */
function commentsblock_block_info() {
  $blocks = array();
  $blocks['comment_form_block'] = array(
    'info' => t('Comment block'),
    'description' => t('The list of comments and the comment form for the node.'),
    'required contexts' => array('node' => 'node'),
    'cache' => BACKDROP_NO_CACHE,
  );
  return $blocks;
}

/** 
 * Implements hook_block_configure().
 */
function commentsblock_block_configure($delta = '', $settings = array()) {
  // This example comes from node.module.
  $form = array();
  if ($delta == 'comment_form_block') {
    $options = array(
      'form' => t('Only render the comment form'),
      'comments_and_form' => t('Render both the comments and the form'),
    );
    $form['commentsblock_display'] = array(
      '#type' => 'select',
      '#title' => t('Content'),
      '#required' => TRUE,
      '#description' => t('Choose what you would like to render in the comments block.'),
      '#default_value' => empty($settings['commentsblock_display']) ? ' form' :  $settings['commentsblock_display'],
      '#options' => $options,
    );

    $form['commetnsblock_info'] = array(
      '#type' => 'help',
      '#markup' => t('If you wish to disable the display of comments and the comment form for all nodes globally, visit the <a href="!config_page">Comments Block configuration page</a>.', array('!config_page' => '/admin/config/user-interface/commentsblock')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */
function commentsblock_block_view($delta, $settings = array(), $contexts = array()) {
  $block = array();

  if ($delta == 'comment_form_block') {
    if ($node = $contexts['node']) {
      $render_array = commentsblock_static_comments($node->nid, $node);

      if (!empty($render_array) && (arg(2) == NULL)) {
        if ($settings['commentsblock_display'] == 'form') {
          // Remove the list of comments from the block.
          unset($render_array['comments']['comments']);
        }
        $block['content'] = backdrop_render($render_array);
      }
    }
  }
  return $block;
}

/**
 * Helper to store or retrieve the comments and form array.
 */
function commentsblock_static_comments($nid, $node) {
  $comments = &backdrop_static(__FUNCTION__);

  if (!isset($comments[$nid])) {
    $comments[$nid]['comments'] = comment_node_page_additions($node);
  }

  return $comments[$nid];
}

/**
 * Implements hook_config_info().
 */
function commentsblock_config_info() {
  $prefixes['commentsblock.settings'] = array(
    'label' => t('Commentsblock settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
